import asyncio
import logging
from datetime import datetime, timedelta
import pytz
from app.datac.db_session import create_session
from app.datac.__all_models import Product, UnifiedOrders, OrderTypes, User

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
try:
    from app.utils.cloudpayments import charge_token_payment
except ImportError:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    async def charge_token_payment(*args, **kwargs):
        return {'success': False, 'message': 'Payment function not available'}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
YEKT = pytz.timezone('Asia/Yekaterinburg')


def get_user_by_id(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    session = create_session()
    try:
        user = session.query(User).filter_by(id=int(user_id)).first()
        if user:
            return {
                'id': user.id,
                'name': user.name,
                'phone_number': user.phone_number,
                'card_token': None  # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
    finally:
        session.close()


async def check_and_update_reservations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    session = create_session()
    try:
        now = datetime.now(YEKT)
        threshold = now - timedelta(minutes=30)

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        expired_reservations = session.query(Product).filter(
            Product.start_of_reservation.isnot(None),
            Product.start_of_reservation <= threshold.strftime('%Y-%m-%d %H:%M:%S')
        ).all()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö
        for product in expired_reservations:
            product.who_is_reserved = None
            product.start_of_reservation = None

        session.commit()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(expired_reservations)} —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π: {e}")
    finally:
        session.close()


async def check_and_extend_office_orders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –æ—Ñ–∏—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    session = create_session()
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ñ–∏—Å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
        now = datetime.now(YEKT)

        logger.debug(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ñ–∏—Å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        office_type = session.query(OrderTypes).filter_by(type_name='office').first()
        if not office_type:
            logger.warning("–¢–∏–ø –∑–∞–∫–∞–∑–∞ 'office' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ñ–∏—Å–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —á–µ—Ä–µ–∑ UnifiedOrders
        orders_to_extend = session.query(UnifiedOrders).filter(
            UnifiedOrders.order_type_id == office_type.type_id,
            UnifiedOrders.end_time < now.strftime('%Y-%m-%d %H:%M:%S'),
            UnifiedOrders.returned == 0
        ).all()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(orders_to_extend)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")

        for order in orders_to_extend:
            logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ID: {order.order_id}, –ø—Ä–æ–¥—É–∫—Ç ID: {order.product_id}, "
                        f"–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {order.end_time}")

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ UUID
            product = session.query(Product).filter(
                Product.product_uuid == order.product_id
            ).first()

            if product:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–æ–±–∞–≤–ª—è–µ–º 45 –º–∏–Ω—É—Ç)
                old_end_time = order.end_time
                new_end_time = (datetime.strptime(order.end_time, '%Y-%m-%d %H:%M:%S') +
                                timedelta(minutes=45)).strftime('%Y-%m-%d %H:%M:%S')

                if order.renewal_time:
                    new_renewal_time = (datetime.strptime(order.renewal_time, '%Y-%m-%d %H:%M:%S') +
                                        timedelta(minutes=45)).strftime('%Y-%m-%d %H:%M:%S')
                else:
                    new_renewal_time = (now + timedelta(minutes=45)).strftime('%Y-%m-%d %H:%M:%S')

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 45 –º–∏–Ω—É—Ç
                additional_amount = product.price_per_hour
                old_rental_amount = order.rental_amount

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
                user_data = get_user_by_id(order.client_id)

                if user_data and user_data.get('card_token'):
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è {additional_amount} —Ä—É–±. –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order.order_id}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                    invoice_id = f'auto_extend_office_{order.order_id}_{int(now.timestamp())}'
                    description = f'–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ #{order.order_id} –Ω–∞ 45 –º–∏–Ω—É—Ç'

                    try:
                        payment_result = await charge_token_payment(
                            token=user_data['card_token'],
                            amount=float(additional_amount),
                            account_id=str(user_data['id']),
                            phone_number=user_data['phone_number'],
                            invoice_id=invoice_id,
                            description=description
                        )

                        if payment_result['success']:
                            # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∑–∞–∫–∞–∑
                            new_rental_amount = order.rental_amount + additional_amount

                            order.end_time = new_end_time
                            order.renewal_time = new_renewal_time
                            order.rental_amount = new_rental_amount

                            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ ID: {order.order_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω")
                            logger.debug(f"  - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {old_end_time} -> {new_end_time}")
                            logger.debug(f"  - –°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {old_rental_amount} -> {new_rental_amount}")
                            logger.debug(f"  - ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_result.get('transaction_id')}")
                        else:
                            # –ù–µ—É–¥–∞—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ - –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∑–∞–∫–∞–∑
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order.order_id}: {payment_result.get('message')}")
                            logger.warning(f"  - –ö–æ–¥ –æ—à–∏–±–∫–∏: {payment_result.get('reason_code')}")
                            logger.warning(f"  - –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã")

                    except Exception as payment_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order.order_id}: {payment_error}")
                        logger.warning(f"  - –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–ø–ª–∞—Ç—ã")
                else:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –±–µ–∑ –æ–ø–ª–∞—Ç—ã (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
                    logger.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.client_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.order_id}")
                    logger.info(f"  - –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã")

                    new_rental_amount = order.rental_amount + additional_amount

                    order.end_time = new_end_time
                    order.renewal_time = new_renewal_time
                    order.rental_amount = new_rental_amount

                    logger.info(f"üìù –ó–∞–∫–∞–∑ ID: {order.order_id} –ø—Ä–æ–¥–ª–µ–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã")
                    logger.debug(f"  - –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {old_end_time} -> {new_end_time}")
                    logger.debug(f"  - –°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {old_rental_amount} -> {new_rental_amount}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —Å ID {order.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.order_id}")

        session.commit()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(orders_to_extend)} –∑–∞–∫–∞–∑–æ–≤")

    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ñ–∏—Å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
    finally:
        session.close()
        logger.debug("–°–µ—Å—Å–∏—è –ë–î –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫—Ä—ã—Ç–∞")


async def background_task_runner():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")

    while True:
        try:
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {datetime.now(YEKT).strftime('%Y-%m-%d %H:%M:%S')}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                check_and_update_reservations(),
                check_and_extend_office_orders()
            )

            # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(120)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º


def start_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ asyncio"""
    return asyncio.create_task(background_task_runner())
